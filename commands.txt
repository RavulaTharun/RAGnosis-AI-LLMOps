Title Name : RAGnosis-AI
Tag line : An End-to-End Medical RAG Chatbot for Intelligent Clinical Insights - 'Diagnosis + RAG'

1. create virtual env w/ the python. (python -m venv venv)
2. To activate. (venv\scripts\activate).
3. create a requirements.txt and write the required dependencies in the file.
4. then create the project structure. (app)->(__init__.py).
5. create some dir in the (app) folder, (common,config,templates,components) folders.
6. create above folders and init file and also write the code(take ref from git link).
7. and then create the (setup.py) file in the folder and copy the code and now install all dep.
8. use (pip install -e .) to install all the dependencies.
9. now create (data) folder to get the raw data.
10. get the Huggingface API_TOKEN : From Huggingface --> access Token --> write (create token), and save it in .env file.
11. The moment you create the (__init__.py) file in any folder (config), Run (pip install -e .) to makesure this whole project as a package into my environment.
12. next create a (config.py) in the config and write code. (get hugging face mistarl ai llm model 7b).
13. create (__init__.py) file in components folder and execute the command. (pip install -e .), so then components will be treated as package.
14. create (pdf_loader.py) in the components and write code.
15. create (embeddings.py) code in the components and write code.
16. create a (vectorstore.py) file in the components folder and write code.
17. create (data_loader.py) in the components folder to create the vectorstore.
18. and also execute the command : (python app/components/data_loader.py)
19. then create the (llm.py) file in the components folder.
20. create the (retriever.py) file in the components to create chain (pipeline).
21. create (index.html) in the templates folder. (modify the look w/ same concept).
22. create (application.py) in the app folder dir. (which is the main code for the app).
23. Note : Langchain text splitter is deprecated (so used new one : from langchain_text_splitters import RecursiveCharacterTextSplitter), (pip install langchain-text-splitters)
24. To find older Running versions of flask (tasklist | find "python") and To kill (taskkill /F /IM python.exe)



Production level :

--- code versioning and docker file.
-- Code versioning.
1. create git repo and create new file (.gitignore) file.
2. git init
3. git branch -M main
4. git add .
5. git commit -m "commit"
6. git push origin main

-- docker file.
1. create a docker file.
2. 


